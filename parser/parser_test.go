package parser_test

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/ulule/loukoum/parser"
	"github.com/ulule/loukoum/stmt"
	"github.com/ulule/loukoum/types"
)

func TestParse_Select(t *testing.T) {
	is := require.New(t)

	{
		input := "SELECT * FROM table"
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 1)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("*", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("table", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 0)
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := "SELECT a, b, c FROM table"
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 3)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("a", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[1].(stmt.Column)
		is.True(ok)
		is.Equal("b", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[2].(stmt.Column)
		is.True(ok)
		is.Equal("c", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("table", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 0)
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := "SELECT a AS fa, b AS fb, c AS fc FROM table"
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 3)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("a", column.Name)
		is.Equal("fa", column.Alias)
		column, ok = query.Expressions[1].(stmt.Column)
		is.True(ok)
		is.Equal("b", column.Name)
		is.Equal("fb", column.Alias)
		column, ok = query.Expressions[2].(stmt.Column)
		is.True(ok)
		is.Equal("c", column.Name)
		is.Equal("fc", column.Alias)
		is.False(query.From.Only)
		is.Equal("table", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 0)
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := "SELECT a, b, c, d, e, f FROM table AS foobar"
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 6)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("a", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[1].(stmt.Column)
		is.True(ok)
		is.Equal("b", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[2].(stmt.Column)
		is.True(ok)
		is.Equal("c", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[3].(stmt.Column)
		is.True(ok)
		is.Equal("d", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[4].(stmt.Column)
		is.True(ok)
		is.Equal("e", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[5].(stmt.Column)
		is.True(ok)
		is.Equal("f", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("table", query.From.Table.Name)
		is.Equal("foobar", query.From.Table.Alias)
		is.Len(query.Joins, 0)
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := "SELECT DISTINCT * FROM table"
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.True(query.Distinct)
		is.Len(query.Expressions, 1)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("*", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("table", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 0)
		is.Len(query.Joins, 0)
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := "SELECT DISTINCT a, b, c FROM table"
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.True(query.Distinct)
		is.Len(query.Expressions, 3)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("a", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[1].(stmt.Column)
		is.True(ok)
		is.Equal("b", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[2].(stmt.Column)
		is.True(ok)
		is.Equal("c", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("table", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 0)
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := "SELECT true"
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 1)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("true", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.True(query.From.IsEmpty())
		is.Len(query.Joins, 0)
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := "SELECT DISTINCT true"
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.True(query.Distinct)
		is.Len(query.Expressions, 1)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("true", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.True(query.From.IsEmpty())
		is.Len(query.Joins, 0)
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := "SELECT a, b, c FROM test1 INNER JOIN test2 ON test1.id = test2.fk_id"
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 3)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("a", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[1].(stmt.Column)
		is.True(ok)
		is.Equal("b", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[2].(stmt.Column)
		is.True(ok)
		is.Equal("c", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("test1", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 1)
		is.Equal("test2", query.Joins[0].Table.Name)
		is.Empty(query.Joins[0].Table.Alias)
		is.Equal(types.InnerJoin, query.Joins[0].Type)
		{
			on, ok := query.Joins[0].Condition.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test1.id", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.fk_id", on.Right.Name)
			is.Empty(on.Right.Alias)
		}
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := "SELECT a, b, c FROM test1 LEFT JOIN test3 ON test3.fkey = test1.id"
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 3)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("a", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[1].(stmt.Column)
		is.True(ok)
		is.Equal("b", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[2].(stmt.Column)
		is.True(ok)
		is.Equal("c", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("test1", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 1)
		is.Equal("test3", query.Joins[0].Table.Name)
		is.Empty(query.Joins[0].Table.Alias)
		is.Equal(types.LeftJoin, query.Joins[0].Type)
		{
			on, ok := query.Joins[0].Condition.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test3.fkey", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test1.id", on.Right.Name)
			is.Empty(on.Right.Alias)
		}
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := "SELECT a, b, c FROM test2 RIGHT JOIN test4 ON test4.gid = test2.id"
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 3)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("a", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[1].(stmt.Column)
		is.True(ok)
		is.Equal("b", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[2].(stmt.Column)
		is.True(ok)
		is.Equal("c", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("test2", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 1)
		is.Equal("test4", query.Joins[0].Table.Name)
		is.Empty(query.Joins[0].Table.Alias)
		is.Equal(types.RightJoin, query.Joins[0].Type)
		{
			on, ok := query.Joins[0].Condition.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.gid", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.id", on.Right.Name)
			is.Empty(on.Right.Alias)
		}
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := fmt.Sprint(
			"SELECT a, b, c FROM test2 INNER JOIN test4 ON test4.gid = test2.id ",
			"INNER JOIN test3 ON test4.uid = test3.id",
		)
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 3)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("a", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[1].(stmt.Column)
		is.True(ok)
		is.Equal("b", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[2].(stmt.Column)
		is.True(ok)
		is.Equal("c", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("test2", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 2)
		is.Equal("test4", query.Joins[0].Table.Name)
		is.Empty(query.Joins[0].Table.Alias)
		is.Equal(types.InnerJoin, query.Joins[0].Type)
		{
			on, ok := query.Joins[0].Condition.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.gid", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.id", on.Right.Name)
			is.Empty(on.Right.Alias)
		}
		is.Equal("test3", query.Joins[1].Table.Name)
		is.Empty(query.Joins[1].Table.Alias)
		is.Equal(types.InnerJoin, query.Joins[1].Type)
		{
			on, ok := query.Joins[1].Condition.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.uid", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test3.id", on.Right.Name)
			is.Empty(on.Right.Alias)
		}
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := fmt.Sprint(
			"SELECT a, b, c FROM test2 INNER JOIN test4 ON (test4.gid = test2.id AND test4.d = test2.d) ",
			"INNER JOIN test3 ON (test4.uid = test3.id AND test3.e = test2.e)",
		)
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 3)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("a", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[1].(stmt.Column)
		is.True(ok)
		is.Equal("b", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[2].(stmt.Column)
		is.True(ok)
		is.Equal("c", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("test2", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 2)
		is.Equal("test4", query.Joins[0].Table.Name)
		is.Empty(query.Joins[0].Table.Alias)
		is.Equal(types.InnerJoin, query.Joins[0].Type)
		{
			infix, ok := query.Joins[0].Condition.(stmt.InfixOnExpression)
			is.True(ok)
			is.NotEmpty(infix)
			on, ok := infix.Left.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.gid", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.id", on.Right.Name)
			is.Empty(on.Right.Alias)
			is.Equal(types.And, infix.Operator.Operator)
			on, ok = infix.Right.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.d", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.d", on.Right.Name)
			is.Empty(on.Right.Alias)
		}
		is.Equal("test3", query.Joins[1].Table.Name)
		is.Empty(query.Joins[1].Table.Alias)
		is.Equal(types.InnerJoin, query.Joins[1].Type)
		{
			infix, ok := query.Joins[1].Condition.(stmt.InfixOnExpression)
			is.True(ok)
			is.NotEmpty(infix)
			on, ok := infix.Left.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.uid", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test3.id", on.Right.Name)
			is.Empty(on.Right.Alias)
			is.Equal(types.And, infix.Operator.Operator)
			on, ok = infix.Right.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test3.e", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.e", on.Right.Name)
			is.Empty(on.Right.Alias)
		}
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := fmt.Sprint(
			"SELECT a, b, c FROM test2 ",
			"INNER JOIN test4 ON ((test4.gid = test2.id AND test4.d = test2.d) OR test4.f = test2.f) ",
			"INNER JOIN test3 ON ((test4.uid = test3.id OR test3.e = test2.e) AND test3.g = test2.g)",
		)
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 3)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("a", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[1].(stmt.Column)
		is.True(ok)
		is.Equal("b", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[2].(stmt.Column)
		is.True(ok)
		is.Equal("c", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("test2", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 2)
		is.Equal("test4", query.Joins[0].Table.Name)
		is.Empty(query.Joins[0].Table.Alias)
		is.Equal(types.InnerJoin, query.Joins[0].Type)
		{
			infix1, ok := query.Joins[0].Condition.(stmt.InfixOnExpression)
			is.True(ok)
			is.NotEmpty(infix1)
			infix2, ok := infix1.Left.(stmt.InfixOnExpression)
			is.True(ok)
			is.NotEmpty(infix2)
			on, ok := infix2.Left.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.gid", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.id", on.Right.Name)
			is.Empty(on.Right.Alias)
			is.Equal(types.And, infix2.Operator.Operator)
			on, ok = infix2.Right.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.d", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.d", on.Right.Name)
			is.Empty(on.Right.Alias)
			is.Equal(types.Or, infix1.Operator.Operator)
			on, ok = infix1.Right.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.f", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.f", on.Right.Name)
		}
		is.Equal("test3", query.Joins[1].Table.Name)
		is.Empty(query.Joins[1].Table.Alias)
		is.Equal(types.InnerJoin, query.Joins[1].Type)
		{
			infix1, ok := query.Joins[1].Condition.(stmt.InfixOnExpression)
			is.True(ok)
			is.NotEmpty(infix1)
			infix2, ok := infix1.Left.(stmt.InfixOnExpression)
			is.True(ok)
			is.NotEmpty(infix2)
			on, ok := infix2.Left.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.uid", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test3.id", on.Right.Name)
			is.Empty(on.Right.Alias)
			is.Equal(types.Or, infix2.Operator.Operator)
			on, ok = infix2.Right.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test3.e", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.e", on.Right.Name)
			is.Empty(on.Right.Alias)
			is.Equal(types.And, infix1.Operator.Operator)
			on, ok = infix1.Right.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test3.g", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.g", on.Right.Name)
		}
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := fmt.Sprint(
			"SELECT a, b, c FROM test2 ",
			"INNER JOIN test4 ON ((test4.gid = test2.id AND test4.d = test2.d) OR ",
			"(test4.f = test2.f AND test4.h = test2.h)) ",
			"INNER JOIN test3 ON ((test4.uid = test3.id OR test3.e = test2.e) AND ",
			"(test3.g = test2.g OR test3.i = test2.i))",
		)
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 3)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("a", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[1].(stmt.Column)
		is.True(ok)
		is.Equal("b", column.Name)
		is.Empty(column.Alias)
		column, ok = query.Expressions[2].(stmt.Column)
		is.True(ok)
		is.Equal("c", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("test2", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 2)
		is.Equal("test4", query.Joins[0].Table.Name)
		is.Empty(query.Joins[0].Table.Alias)
		is.Equal(types.InnerJoin, query.Joins[0].Type)
		{
			infix1, ok := query.Joins[0].Condition.(stmt.InfixOnExpression)
			is.True(ok)
			is.NotEmpty(infix1)
			infix2, ok := infix1.Left.(stmt.InfixOnExpression)
			is.True(ok)
			is.NotEmpty(infix2)
			on, ok := infix2.Left.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.gid", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.id", on.Right.Name)
			is.Empty(on.Right.Alias)
			is.Equal(types.And, infix2.Operator.Operator)
			on, ok = infix2.Right.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.d", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.d", on.Right.Name)
			is.Empty(on.Right.Alias)
			is.Equal(types.Or, infix1.Operator.Operator)
			infix2, ok = infix1.Right.(stmt.InfixOnExpression)
			is.True(ok)
			is.NotEmpty(infix2)
			on, ok = infix2.Left.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.f", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.f", on.Right.Name)
			is.Empty(on.Right.Alias)
			is.Equal(types.And, infix2.Operator.Operator)
			on, ok = infix2.Right.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.h", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.h", on.Right.Name)
			is.Empty(on.Right.Alias)
		}
		is.Equal("test3", query.Joins[1].Table.Name)
		is.Empty(query.Joins[1].Table.Alias)
		is.Equal(types.InnerJoin, query.Joins[1].Type)
		{
			infix1, ok := query.Joins[1].Condition.(stmt.InfixOnExpression)
			is.True(ok)
			is.NotEmpty(infix1)
			infix2, ok := infix1.Left.(stmt.InfixOnExpression)
			is.True(ok)
			is.NotEmpty(infix2)
			on, ok := infix2.Left.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test4.uid", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test3.id", on.Right.Name)
			is.Empty(on.Right.Alias)
			is.Equal(types.Or, infix2.Operator.Operator)
			on, ok = infix2.Right.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test3.e", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.e", on.Right.Name)
			is.Empty(on.Right.Alias)
			is.Equal(types.And, infix1.Operator.Operator)
			infix2, ok = infix1.Right.(stmt.InfixOnExpression)
			is.True(ok)
			is.NotEmpty(infix2)
			on, ok = infix2.Left.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test3.g", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.g", on.Right.Name)
			is.Empty(on.Right.Alias)
			is.Equal(types.Or, infix2.Operator.Operator)
			on, ok = infix2.Right.(stmt.OnClause)
			is.True(ok)
			is.NotEmpty(on)
			is.Equal("test3.i", on.Left.Name)
			is.Empty(on.Left.Alias)
			is.Equal("test2.i", on.Right.Name)
			is.Empty(on.Right.Alias)
		}
		is.True(query.Where.IsEmpty())
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := "SELECT id FROM table WHERE (id = '1')"
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 1)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("id", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("table", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 0)
		is.False(query.Where.IsEmpty())
		{
			infix, ok := query.Where.Condition.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix)
			id, ok := infix.Left.(stmt.Identifier)
			is.True(ok)
			is.NotEmpty(id)
			is.Equal("id", id.Identifier)
			op, ok := infix.Operator.(stmt.ComparisonOperator)
			is.True(ok)
			is.NotEmpty(op)
			is.Equal(types.Equal, op.Operator)
			val, ok := infix.Right.(stmt.Raw)
			is.True(ok)
			is.Equal("'1'", val.Value)
		}
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := "SELECT id FROM table WHERE ((id = 1) AND (slug = 'foo'))"
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 1)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("id", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("table", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 0)
		is.False(query.Where.IsEmpty())
		{
			infix1, ok := query.Where.Condition.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix1)
			infix2, ok := infix1.Left.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix2)
			id, ok := infix2.Left.(stmt.Identifier)
			is.True(ok)
			is.NotEmpty(id)
			is.Equal("id", id.Identifier)
			op1, ok := infix2.Operator.(stmt.ComparisonOperator)
			is.True(ok)
			is.NotEmpty(op1)
			is.Equal(types.Equal, op1.Operator)
			val, ok := infix2.Right.(stmt.Raw)
			is.True(ok)
			is.Equal("1", val.Value)
			op2, ok := infix1.Operator.(stmt.LogicalOperator)
			is.True(ok)
			is.NotEmpty(op2)
			is.Equal(types.And, op2.Operator)
			infix3, ok := infix1.Right.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix3)
			id, ok = infix3.Left.(stmt.Identifier)
			is.True(ok)
			is.NotEmpty(id)
			is.Equal("slug", id.Identifier)
			op1, ok = infix3.Operator.(stmt.ComparisonOperator)
			is.True(ok)
			is.NotEmpty(op1)
			is.Equal(types.Equal, op1.Operator)
			val, ok = infix3.Right.(stmt.Raw)
			is.True(ok)
			is.Equal("'foo'", val.Value)
		}
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := "SELECT id FROM table WHERE (((id = :arg_1) AND (slug = :arg_2)) OR (title = :arg_3))"
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 1)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("id", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("table", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 0)
		is.False(query.Where.IsEmpty())
		{
			infix1, ok := query.Where.Condition.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix1)
			infix2, ok := infix1.Left.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix2)
			infix3, ok := infix2.Left.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix3)
			id, ok := infix3.Left.(stmt.Identifier)
			is.True(ok)
			is.NotEmpty(id)
			is.Equal("id", id.Identifier)
			op1, ok := infix3.Operator.(stmt.ComparisonOperator)
			is.True(ok)
			is.NotEmpty(op1)
			is.Equal(types.Equal, op1.Operator)
			val, ok := infix3.Right.(stmt.Raw)
			is.True(ok)
			is.Equal(":arg_1", val.Value)
			op2, ok := infix2.Operator.(stmt.LogicalOperator)
			is.True(ok)
			is.NotEmpty(op2)
			is.Equal(types.And, op2.Operator)
			infix4, ok := infix2.Right.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix4)
			id, ok = infix4.Left.(stmt.Identifier)
			is.True(ok)
			is.NotEmpty(id)
			is.Equal("slug", id.Identifier)
			op1, ok = infix4.Operator.(stmt.ComparisonOperator)
			is.True(ok)
			is.NotEmpty(op1)
			is.Equal(types.Equal, op1.Operator)
			val, ok = infix4.Right.(stmt.Raw)
			is.True(ok)
			is.Equal(":arg_2", val.Value)
			op2, ok = infix1.Operator.(stmt.LogicalOperator)
			is.True(ok)
			is.NotEmpty(op2)
			is.Equal(types.Or, op2.Operator)
			infix5, ok := infix1.Right.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix5)
			id, ok = infix5.Left.(stmt.Identifier)
			is.True(ok)
			is.NotEmpty(id)
			is.Equal("title", id.Identifier)
			op1, ok = infix5.Operator.(stmt.ComparisonOperator)
			is.True(ok)
			is.NotEmpty(op1)
			is.Equal(types.Equal, op1.Operator)
			val, ok = infix5.Right.(stmt.Raw)
			is.True(ok)
			is.Equal(":arg_3", val.Value)
		}
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}
	{
		input := fmt.Sprint(
			"SELECT id FROM table WHERE (((id = $1) OR (title = $2)) OR ",
			"((slug = $3) AND (active = $4)))",
		)
		result, err := parser.Parse(input)
		is.NoError(err)
		is.NotNil(result)
		is.IsType(stmt.Select{}, result)
		query := (result).(stmt.Select)

		is.True(query.Prefix.IsEmpty())
		is.True(query.With.IsEmpty())
		is.False(query.Distinct)
		is.Len(query.Expressions, 1)
		column, ok := query.Expressions[0].(stmt.Column)
		is.True(ok)
		is.Equal("id", column.Name)
		is.Empty(column.Alias)
		is.False(query.From.Only)
		is.Equal("table", query.From.Table.Name)
		is.Empty(query.From.Table.Alias)
		is.Len(query.Joins, 0)
		is.False(query.Where.IsEmpty())
		{
			infix1, ok := query.Where.Condition.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix1)
			infix2, ok := infix1.Left.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix2)
			infix3, ok := infix2.Left.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix3)
			id, ok := infix3.Left.(stmt.Identifier)
			is.True(ok)
			is.NotEmpty(id)
			is.Equal("id", id.Identifier)
			op1, ok := infix3.Operator.(stmt.ComparisonOperator)
			is.True(ok)
			is.NotEmpty(op1)
			is.Equal(types.Equal, op1.Operator)
			val, ok := infix3.Right.(stmt.Raw)
			is.True(ok)
			is.Equal("$1", val.Value)
			op2, ok := infix2.Operator.(stmt.LogicalOperator)
			is.True(ok)
			is.NotEmpty(op2)
			is.Equal(types.Or, op2.Operator)
			infix3, ok = infix2.Right.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix3)
			id, ok = infix3.Left.(stmt.Identifier)
			is.True(ok)
			is.NotEmpty(id)
			is.Equal("title", id.Identifier)
			op1, ok = infix3.Operator.(stmt.ComparisonOperator)
			is.True(ok)
			is.NotEmpty(op1)
			is.Equal(types.Equal, op1.Operator)
			val, ok = infix3.Right.(stmt.Raw)
			is.True(ok)
			is.Equal("$2", val.Value)
			op2, ok = infix1.Operator.(stmt.LogicalOperator)
			is.True(ok)
			is.NotEmpty(op2)
			is.Equal(types.Or, op2.Operator)
			infix2, ok = infix1.Right.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix2)
			infix3, ok = infix2.Left.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix3)
			id, ok = infix3.Left.(stmt.Identifier)
			is.True(ok)
			is.NotEmpty(id)
			is.Equal("slug", id.Identifier)
			op1, ok = infix3.Operator.(stmt.ComparisonOperator)
			is.True(ok)
			is.NotEmpty(op1)
			is.Equal(types.Equal, op1.Operator)
			val, ok = infix3.Right.(stmt.Raw)
			is.True(ok)
			is.Equal("$3", val.Value)
			op2, ok = infix2.Operator.(stmt.LogicalOperator)
			is.True(ok)
			is.NotEmpty(op2)
			is.Equal(types.And, op2.Operator)
			infix3, ok = infix2.Right.(stmt.InfixExpression)
			is.True(ok)
			is.NotEmpty(infix3)
			id, ok = infix3.Left.(stmt.Identifier)
			is.True(ok)
			is.NotEmpty(id)
			is.Equal("active", id.Identifier)
			op1, ok = infix3.Operator.(stmt.ComparisonOperator)
			is.True(ok)
			is.NotEmpty(op1)
			is.Equal(types.Equal, op1.Operator)
			val, ok = infix3.Right.(stmt.Raw)
			is.True(ok)
			is.Equal("$4", val.Value)
		}
		is.True(query.GroupBy.IsEmpty())
		is.True(query.Having.IsEmpty())
		is.True(query.OrderBy.IsEmpty())
		is.True(query.Limit.IsEmpty())
		is.True(query.Offset.IsEmpty())
		is.True(query.Suffix.IsEmpty())

		ctx := &types.RawContext{}
		result.Write(ctx)
		is.Equal(input, ctx.Query())
	}

	// TODO
}
